{{ license }}
#include <string>
{%- macro iter_function_variants(function) %}

{% endmacro %}
{%- macro recurse(structure) %}

namespace {{ structure.name }} {

static inline std::string get_docstring(std::string name, int variant=0) {

    if (name == "test") {
        return "test";

{% if structure.constants is not none %}
{% for constant in structure.constants %}

    } else if(name == "{{ constant.name }}") {
        return {{ structure[constant.name] | safe }};

{% endfor %}
{% endif %}

{% if structure.classes is not none %}
{% for class in structure.classes %}

    } else if(name == "{{ class.name }}") {
         return R"(
             {% filter indent(8) -%}
             {{ structure[class.name]['__docstring__'] | safe }}
             {%- endfilter %}
     )";

{% if structure[class.name].methods is not none %}
{% for method in structure[class.name].methods %}

{%- if structure[class.name][method.name].overloaded %}
{%- for v in range(structure[class.name][method.name].overloads) %}

    } else if(name == "{{ class.name }}.{{ method.name }}" && variant=={{ v }}) {
            return R"(
            {% filter indent(8) -%}
            {{ structure[class.name][method.name][v] | safe }}
            {%- endfilter %}
    )";

{% endfor %}
{%- else %}

    } else if(name == "{{ class.name }}.{{ method.name }}" && variant==0) {
            return R"(
            {% filter indent(8) -%}
            {{ structure[class.name][method.name] | safe }}
            {%- endfilter %}
    )";

{% endif %}

{% endfor %}
{% endif %}

{% endfor %}
{% endif %}

{% if structure.functions is not none %}
{% for function in structure.functions %}

{%- if structure[function.name].overloaded %}
{%- for v in range(structure[function.name].overloads) %}

    } else if(name == "{{ function.name }}" && variant=={{ v }}) {
            return R"(
            {% filter indent(8) -%}
            {{ structure[function.name][v] | safe }}
            {%- endfilter %}
    )";

{% endfor %}
{%- else %}

    } else if(name == "{{ function.name }}" && variant==0) {
            return R"(
            {% filter indent(8) -%}
            {{ structure[function.name] | safe }}
            {%- endfilter %}
    )";

{% endif %}

{% endfor %}
{% endif %}

    } else {
        return "No documentation found.";
    }

}

{% if structure.modules is not none %}
{% for submodule in structure.modules %}

    {{ recurse(structure[submodule]) | safe }}

{% endfor %}
{% endif %}

}

{% endmacro %}


{{ recurse(api_structure) }}